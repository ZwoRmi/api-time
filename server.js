 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var monthNames = ["January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

function isNormalInteger(str) {
    return /^\+?\d+$/.test(str);
}

function isUnixTimeStamp(possibleTimeStamp) {
  
  return isNormalInteger(possibleTimeStamp) && (new Date(parseInt(possibleTimeStamp)*1000)).getTime() > 0;
}

function getNaturalDate(timeStamp) {
  var date = new Date(parseInt(timeStamp)*1000);
  return monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
}

function isNaturalDate(possibleNaturalDate) {
  return /\w+ \d+, \d+/.test(possibleNaturalDate);
}

function getUnixTimeStamp(naturalDate) {
  var splittedDate = naturalDate.replace(',', '').split(' ');
  var month = monthNames.indexOf(splittedDate[0]);
  
  var date = new Date(splittedDate[2], month, splittedDate[1]);
  return date.getTime() / 1000;
}

app.route('/:date').get(function(req, res) {
  var date = req.params.date;
  if(isUnixTimeStamp(date)) {
    res.json({natural:getNaturalDate(date), unix:date});
  }
  else if(isNaturalDate(date)) {
    res.json({natural:date, unix:getUnixTimeStamp(date)});
  }
  else {
    res.json({natural: null, unix: null});
  }
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

